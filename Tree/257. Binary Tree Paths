/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
// suppose curr node ty hegy a appa so 2 paths banangy to leaf nodes so do vari fun call hoega for left and right child

    void fun(TreeNode* root,string path,vector<string>&ans)// vector string by reef bhejo g
    {
        //base case di lod nhi nechy do if la do baki if(root==NULL) return;

        string currnode=to_string(root->val);

        // if leaf node
        if(root->left==NULL && root->right==NULL)
        {
            path=path+currnode;
            ans.push_back(path);
            return;
        }
        //if it is not a leaf node then
        if(root->left!=NULL) fun(root->left,path+currnode+"->",ans);
        if(root->right!=NULL) fun(root->right,path+currnode+"->",ans);

    }

    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> ans;
        string path="";
        fun(root,path,ans);
        return ans;
    }
};
