/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

/*

pepcoding-------------------<-

pre -->  ROOT , LEFT, RIGHT
post --> LEFT , ROOT , RIGHT

                              pre   1,2,4,5,3,6,7
                               post 4,5,2,6,7,3,1

                                            1
                                pre     2 4 5       3 6 7
                               post     4 5 2       6 7 3

                                      2         3
                              pre      4 5         6 7
                              post     4 5         6 7
                                

recusion use honyi a
ik tym ty do recusvive call marni 
first for left 
second for right

*/

class Solution {
public:

    TreeNode* solve(vector<int>& preorder,int pre_start,int pre_end,vector<int>& postorder,int post_start,int post_end)
    {
        //base case
        if(pre_start>pre_end)
        return NULL;

        //crate new node
        TreeNode * root=new TreeNode(preorder[pre_start]);

        //if only singl enode left
        if(pre_start==pre_end)
        return root;

        //hun sanu jedi root bni a oda next elemnt in preorder kado

        int idx=post_start;//sanu search hun post array ch karna ki pre da elemnt hai ki nhi oho jo rot to baad ay a[re ch]

        while(preorder[pre_start+1]!=postorder[idx])
        idx++;//=2

        int len=idx-post_start+1; //hun 3 length  di post ty pre next recsuive ch pass kardo

        //2 recursive calls
        root->left=solve(preorder,pre_start+1,pre_start+len,postorder,post_start,idx);
        root->right=solve(preorder,pre_start+len+1,pre_end,postorder,idx+1,post_end-1);

        return root;


    }


    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        int n=preorder.size();
        int m=postorder.size();
        return solve(preorder,0,n-1,postorder,0,m-1);
    }
};
