/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // max left depth + max right depth 
    int fun(TreeNode* root,int& dia) // dia by reference
    {
        if(root==NULL) return 0;
        int left=fun(root->left,dia);
        int right=fun(root->right,dia);
        int currlen=left+right;
        dia=max(dia,currlen);
        return max(left,right)+1;//max depth from this side
    }


    int diameterOfBinaryTree(TreeNode* root) {
        //longest path between any 2 node
        // check the curr nodes left tkk depth and right takk depth
        int dia=0;
        fun(root,dia); //dia is max dia till now :\U0001f426‚Äç\U0001f525 edron return ni krna nhi tan root to janda hoya max dia aunga may be root to oho na janda hovy max path
        return dia;

    }
};
