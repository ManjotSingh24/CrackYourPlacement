/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

/*
1. Use the Inoredr sorted property of BST
2. TIP : think in terms of array
     do cases banan gy the swapped nodes are adjecent 
     suppose ehe inoredr aya sequence hk kar 7 and 8 glt a 
     3    5   8   7   10  15
        in this case jdo  7 < prev 8  violate ho gya sorted property 
        tahi ik curr ty middle node da adress store karlo
        first= 7 and middle =8

        SWAP(FIRST,MIDDLE)

     not adjecent
    3   25  7   8   10  15  20  5

    violation no. 1         25 and 7 ty first=25 and midlle=7
    again violation no. 2   20 and 5 hun bas 5 store karla as  last=5
    first ty last nu

    SWAP(FIRST,LAST)


    ehe sab pta kdo check kra jdo asi inoredr ch

    left
    node---------------------> is time 
    right
*/

class Solution {
private:

TreeNode* first;
TreeNode* prev;
TreeNode* middle;
TreeNode* last;

void inorder(TreeNode* root)
{
    //base case
    if(!root)
    return;

    //left recursive
    inorder(root->left);


    //main kaam
    if(prev!=NULL)
    {
        if(root->val < prev->val)//eh tan ghat ho gya hun
        //first violation tan hoegi jdon first NULL c nhi tan second violation
        {
            if(first==NULL)
            {   
                first=prev;
                middle=root;
                
            }
            else
            {
                last=root;
            }
        }
    }


    //right recursive
    //uston pela prev change kardo g
    prev=root;
    inorder(root->right);

}


public:
    void recoverTree(TreeNode* root) {
        first=middle=last=NULL;
        prev=new TreeNode(INT_MIN);
        inorder(root);
        //if non adjecent
        if(first && last)
        swap(first->val,last->val);
        //if adjecent
        else if( first && middle)
        swap(first->val,middle->val);


    }
};    
