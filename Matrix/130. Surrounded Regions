class Solution {
public:
/*
1. any one that i sconnectd to boundry 0 i snot converted by 'X' 
2. go to the boundry 0 and bfs maro on 0 tak poncho jo boundry 0 ky bfs mein aty hein vo bach jaegy
3. rest all are captured by 'X'
4. boundry 0 ty dfs maro and visited matrix ch mark karo ohna nu rest all 'X
5. dfs vasty apa stack nhi use krangy but system stack use krangy by calling recusion
*/

    void dfs(int i,int j,vector<vector<char>>& board,vector<vector<int>>&vis,vector<int> &r,vector<int>&c)
    {
        //pelan tan ehnu visited mark kardy
        vis[i][j]=1;
        int n=board.size();
        int m=board[0].size();

        for(int k=0;k<4;k++)
        {
            int newrow=i+r[k];
            int newcol=j+c[k];
            // go to its neighbouring non visited O's
            if( newrow<n && newrow>=0 && newcol<m && newcol>=0 && board[newrow][newcol]=='O' && vis[newrow][newcol]==0)
            dfs(newrow,newcol,board,vis,r,c);
        }




    }

    void solve(vector<vector<char>>& board) {
        
        int n=board.size();
        int m=board[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
        vector<int> r={-1,0,1,0};
        vector<int> c={0,1,0,-1};

        //  go to boundry 0
        for(int j=0;j<m;j++)
        {
            //first row --> non vsited + 'O'
            if(vis[0][j]==0 && board[0][j]=='O')
            dfs(0,j,board,vis,r,c);

            //last row
            if(vis[n-1][j]==0 && board[n-1][j]=='O')
            dfs(n-1,j,board,vis,r,c);

        }

        for(int i=0;i<n;i++)
        {
            //first col
            if(vis[i][0]==0 && board[i][0]=='O')
            dfs(i,0,board,vis,r,c);


            //last col
            if(vis[i][m-1]==0 && board[i][m-1]=='O')
            dfs(i,m-1,board,vis,r,c);

        }

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(vis[i][j]==0 && board[i][j]=='O')// O c but bfs laky visited nhi hoya means captured
                board[i][j]='X';
            }
        }


    }
};
