class Solution {
public:
    /*

   1. sub problem apa matrix chon pelan 1 d array ad ky is oho row da max rea niklangy
   2. oh 1d array ty 2nd row add karky pher ik 1 d array bnavangy ans max area niklangy
   3. hight tan sanu pta lg jy gi but width vasty sanu stack use krni paini

    1  0  1  0  0 -> A=1

    2  0  2  1  1 -> A->3

    3  1  3  2  2 --> 6

    4  0  0  3  0 --> A=4   dhyn di 0 kiven ay a last 1d array ch 

    */

    vector<int> getNSL(vector<int> &heights)
    {
        stack<int>stk;
        int n=heights.size();
        vector<int>NSL(n);


        for(int i=0;i<n;i++)
        {
            if(stk.empty())
            {
            NSL[i]=-1;//out of bound index
            //stk.push(i); and ch push krangy
            }
            else
            {
                while(!stk.empty() && heights[i]<=heights[stk.top()])
                {
                    stk.pop();
                }
                if(stk.empty())
                NSL[i]=-1;
                else
                NSL[i]=stk.top();
            }

            stk.push(i);

        }
    return NSL;

    }

    vector<int> getNSR(vector<int> &heights)
    {
        stack<int>stk;
        int n=heights.size();
        vector<int>NSR(n);
        

        for(int i=n-1;i>=0;i--)
        {
            if(stk.empty())
            {
            NSR[i]=n;//out of bound index
            //stk.push(i); and ch push krangy
            }
            else
            {
                while(!stk.empty() && heights[i]<=heights[stk.top()])
                {
                    stk.pop();
                }
                if(stk.empty())
                NSR[i]=n;
                else
                NSR[i]=stk.top();
            }

            stk.push(i);
        }
        return NSR;
    }


    int fun(vector<int> &heights)  //2   0  2   1   1
    {
        int n=heights.size();
        vector<int>psi;//prev smaller index
        vector<int>nsi;//next smaller index

        psi=getNSL(heights);//next smaller to left
        nsi=getNSR(heights);// next smaller to right

        int maxarea=0;

        for(int i=0;i<n;i++)
        {
            maxarea=max(maxarea,(nsi[i]-psi[i]-1)*heights[i]);
        }

        return maxarea;



    }


    int maximalRectangle(vector<vector<char>>& matrix) {
        int row=matrix.size();
        int col=matrix[0].size();
        int maxarea=INT_MIN;
        vector<int> oneD(col,0);

        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
             if(matrix[i][j]=='1')
             oneD[j]+=1;
             else
             oneD[j]=0; //very imp lne uper example matrix ch dekh jra last row dy kuj elemnt 0 kiven hoy   
            }
            maxarea=max(maxarea,fun(oneD));
        }

        return maxarea;

    }
};
