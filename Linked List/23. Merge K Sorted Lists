/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* mergell(ListNode* l1,ListNode* l2)
    {

        if(!l1)return l2;
        if(!l2)return l1;

        if(l1->val<=l2->val)
        {
            l1->next=mergell(l1->next,l2); //recursion use kiti a
            return l1;
        }
        else
        {
            l2->next=mergell(l1,l2->next);
            return l2;
        }



    }

    ListNode* mergesort(int start,int end,vector<ListNode*>& lists )
    {
        if(start>end)
        return NULL;

        if(start==end)
        return lists[start];

        int mid=start+(end-start)/2;

        ListNode* list1=mergesort(start,mid,lists);
        ListNode* list2=mergesort(mid+1,end,lists);

        return mergell(list1,list2);


    }

    ListNode* mergeKLists(vector<ListNode*>& lists) 
    {
       int k=lists.size();

        if(k==0)
        return NULL;

        if(k==1)
        return lists[0]; //first linked list da head hi bhej do

        int s=0;
        int e=lists.size()-1;

       return mergesort(s,e,lists);


    }
};
