class Solution {
  public:
  
    Node* half(Node* head)
    {
        Node* slow=head;
        Node* fast=head;
        
        while(fast!=NULL && fast->next!=NULL)
        {
         
         slow=slow->next;
         fast=fast->next->next;
        }
        
        return slow;
    }
    
    
    
    Node* reverse(Node* head)
    {
        if(head==NULL || head->next==NULL)
        return head;
        
        Node* last =reverse(head->next);
        head->next->next=head;
        head->next=NULL;
        return last;
    }
  
  
  
    void reorderList(Node* head) {
        // Your code here
           
        //1. get the half of the linked list
        Node* mid=half(head);
           
        //2. reverse the 2nd half linked list
        Node* tail=reverse(mid);
        
        Node* curr=head;
        
        while(tail->next!=NULL)
        {
            Node* temp1=curr->next;
            Node* temp2=tail->next;
            
            curr->next=tail;
            tail->next=temp1;
            
            curr=temp1;
            tail=temp2;
        }
        
        
        
    }
};
