int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        int r=grid.size();
        int c=grid[0].size();
        int fresh_count=0;
        int get_rotten=0;
        
        // {{row,col},time}
        queue<pair<pair<int,int>,int>>q;
        vector<vector<bool>>visited(r,vector<bool>(c,false));
        
        //jeded starting to hi rotten ny ohna nu queu e ch pao ohna to bfs lgavangy appa
        
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(grid[i][j]==2) //means they are rotten
                {
                q.push({{i,j},0});
                visited[i][j]=true;
                }
                if(grid[i][j]==1)
                fresh_count++; // will be the count at time 0
            }
        }
        
        int max_t=0;
        
        int row[]={-1,0,1,0};
        int col[]={0,1,0,-1};
        
        while(!q.empty())
        {
            int a=q.front().first.first;
            int b=q.front().first.second;
            int timee=q.front().second;
            max_t=max(timee,max_t);
            
            q.pop();
            
            for(int i=0;i<4;i++)
            {
                int newrow=a+row[i];
                int newcol=b+col[i];
                
                if(newrow>=0 && newcol>=0 && newrow<r && newcol<c && visited[newrow][newcol]==false && grid[newrow][newcol]==1)
                {
                    q.push({{newrow,newcol},timee+1});
                    visited[newrow][newcol]=true;
                    get_rotten++;
                }
            }
            
        }
        
        if(fresh_count>get_rotten)
        return -1;
        
        else return max_t;
        
        
        return 0;
        
        
        
    }
